it first check the DOM for trigger inputs
that's when it creates eventListeners
- for every class or identifier it creates a dedicated event listener
  (regenerating the eventListeners will fail because dynamic inputs/buttons)

or

once class is added it already creates eventListeners (most plausible, leaning more into)
this is for generalizing events for buttons and inputs
which might cause some uneccessary data if user doesnt
include trigger inputs
- we could import, so that would be the starting point when eventListeners will trigger
- triggers are called in the child class, not in the parent class(Page)
- identify the form, then retrieve the ids from their
- on interact(click/change) will trigger inputs
- separate the functionality of textinput and clickables (separation of concerns, have submit, inputs or keydowns, and clickables separated)

set inputs
inputs - number, text, textarea, table inputs, datepickers
select, options - 
buttons- input-buttons, buttons, submits
selectables / clickables (elements that are clickable) - button, button-icons
links - anchor tags
external set inputs

features to be added
/- must have id or class for for differentiating the elements
- inputs are saved automatically in local storage
- inputs for tables is per row, will just read from the attributes of each cell
- inputs for tables is separated from input[type = text], need to accomodate both, especially in input_data
/- in clicks not all should require a value in custom-attribute, but can be used as an identifier
/- allow blank initial records
?- Can inputs be double instance. (Yes. But it would still join other text inputs because it's trying to get every input[type=text] and the custom attribute "input_data")